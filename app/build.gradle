apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'

android {
    namespace "com.lksnext.parkingplantilla"
    buildToolsVersion "35.0.0"
    compileSdk 35

    defaultConfig {
        applicationId "com.lksnext.parkingplantilla"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
}

jacoco {
    toolVersion = "0.8.11"
}



dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.navigation:navigation-fragment:2.8.9'
    implementation 'androidx.navigation:navigation-ui:2.8.9'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.firebase:firebase-auth:22.3.0'
    implementation 'com.google.firebase:firebase-firestore:25.0.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jacoco:org.jacoco.core:0.8.12'
    testImplementation 'org.jacoco:org.jacoco.report:0.8.12'
    testImplementation 'org.robolectric:robolectric:4.11.1'

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}

// --- Jacoco custom task ---
task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest"]) {
    reports {
        xml.required = true
        html.required = true
    }

    def excludeFilter = ['**/R.class', '**/BuildConfig.*', '**/*Test*.*']

    classDirectories.setFrom(fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: excludeFilter))
    sourceDirectories.setFrom(files(["$projectDir/src/main/java", "$projectDir/src/main/kotlin"]))

    // Buscar el archivo .exec en ambas rutas posibles
    def execFile1 = file("$buildDir/jacoco/testDebugUnitTest.exec")
    def execFile2 = file("$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")
    if (execFile2.exists()) {
        executionData.setFrom(execFile2)
    } else {
        executionData.setFrom(execFile1)
    }

    doFirst {
        file("$buildDir/reports/jacoco/jacocoTestReport").mkdirs()
    }
}

afterEvaluate {
    tasks.named("testDebugUnitTest").configure {
        finalizedBy tasks.named("jacocoTestReport")
    }
}
